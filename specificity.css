/* CSS SPECIFICITY EXAMPLES */

/* 
  Specificity Hierarchy (from highest to lowest):
  - Inline styles: specificity of 1 (highest priority)
  - IDs: specificity of 100
  - Classes: specificity of 10
  - Type selectors (e.g., div, h1): specificity of 1
  - Descendant selectors: calculated based on the specificity of all selectors involved
  - Universal selector: specificity of 0 (lowest)
  
  If two or more rules apply to the same element and have the same specificity,
  the last defined rule in the CSS will take precedence.
*/

/* IDs have a specificity of 100 */
#one-hundred {
  background: #b4bc1f;
  height: 400px;
  border: 3px solid blue;
}

/* Classes have a specificity of 10 */
.ten {
  background: #b71775;
  height: 200px;
  color: yellow;
}

/* Type selector (specificity of 1) */
header {
  padding: 20px;
  border: 2px solid black;
  color: green;
}

/* Example of descendant selector specificity */
/* Specificity score: 2 (1 for header + 1 for p) */
header p {
  color: blue;
  font-size: 18px;
}

/* 
    Descendant selectors are used to target elements that are nested within 
    another element. They allow you to apply styles based on the relationship 
    between elements in the HTML structure.
  
    Example: `header p` targets all <p> elements within <header>.
    
    Each element type in the selector contributes to the overall specificity score. 
    For `header p`, the score is:
    - 1 for the `header` element (type selector)
    - 1 for the `p` element (type selector)
    
    Total specificity score: 2
  */

/* Example of combining classes and IDs */
/* Specificity score: 110 (100 for ID + 10 for class) */
#one-hundred.ten {
  background: purple;
}

/* Example of a pseudo-class selector */
/* Specificity score: 11 (10 for .btn + 1 for :hover) */
button:hover {
  background: orange;
}

/* 
    Pseudo-classes are special keywords added to selectors that specify a 
    special state of the selected elements. 
  
    Common pseudo-classes include:
    - **:hover**: Styles when the user hovers over an element.
    - **:focus**: Styles when an element is focused.
    - **:active**: Styles while an element is being activated.
    - **:nth-child(n)**: Selects elements based on their position in a parent.
    - **:disabled**: Styles to form elements that are disabled.
  
    Specificity of pseudo-classes:
    - Score of 1 when used alone.
    - Combined with other selectors for an overall score. E.g., `.btn:hover` 
      = 10 (for .btn) + 1 (for :hover) = 11.
  */

/* Example of multiple classes */
/* Specificity score: 10 */
.btn {
  padding: 10px;
  font-size: 16px;
}

/* Specificity score: 20 (10 for .btn + 10 for .primary) */
.btn.primary {
  background: blue;
  color: white;
}

/* Example of using !important */
/* 
    The !important declaration increases specificity and ensures styles take 
    precedence over other conflicting styles, regardless of specificity.
  
    Use cases:
    - **Override Specific Styles**: Ensure a particular style is applied.
    - **Quick Fixes**: When you can't change the order of stylesheets.
  
    Important considerations:
    - **Overuse**: Can lead to difficult-to-maintain code.
    - **Specificity Wars**: Encourages marking styles as important to override others.
    - **Best Practices**: Use sparingly; manage specificity through selector hierarchy.
  
    Example:
    The following styles for the button with class `.btn.important` 
    will always apply, overriding any other styles.
  */
.btn.important {
  background: red !important;
  color: white !important;
}

/* Example of universal selector */
/* Specificity score: 0 */

/* 
    The universal selector (*) targets all elements in the document. 
    It's useful for applying general styles affecting every element.
  
    Common use cases:
    - Resetting default margins and paddings.
    - Setting a universal box-sizing model.
  
    Important considerations:
    - Lowest specificity (0); overridden by more specific styles.
    - Overuse can lead to performance issues; target specific elements when possible.
  */
* {
  margin: 0; /* Resets margin for all elements; will not be overridden */
  box-sizing: border-box; /* Sets box-sizing for all elements */
}
